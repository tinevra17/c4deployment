'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionTokenCache = undefined;

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function userForSessionToken(sessionToken) {
  var q = new _node2.default.Query("_Session");
  q.equalTo("sessionToken", sessionToken);
  return q.first({ useMasterKey: true }).then(function (session) {
    if (!session) {
      return Promise.reject("No session found for session token");
    }
    return session.get("user");
  });
}

class SessionTokenCache {

  constructor(timeout = 30 * 24 * 60 * 60 * 1000, maxSize = 10000) {
    this.cache = new _lruCache2.default({
      max: maxSize,
      maxAge: timeout
    });
  }

  getUserId(sessionToken) {
    if (!sessionToken) {
      return Promise.reject('Empty sessionToken');
    }
    const userId = this.cache.get(sessionToken);
    if (userId) {
      _logger2.default.verbose('Fetch userId %s of sessionToken %s from Cache', userId, sessionToken);
      return Promise.resolve(userId);
    }
    return userForSessionToken(sessionToken).then(user => {
      _logger2.default.verbose('Fetch userId %s of sessionToken %s from Parse', user.id, sessionToken);
      const userId = user.id;
      this.cache.set(sessionToken, userId);
      return Promise.resolve(userId);
    }, error => {
      _logger2.default.error('Can not fetch userId for sessionToken %j, error %j', sessionToken, error);
      return Promise.reject(error);
    });
  }
}

exports.SessionTokenCache = SessionTokenCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU2Vzc2lvblRva2VuQ2FjaGUuanMiXSwibmFtZXMiOlsidXNlckZvclNlc3Npb25Ub2tlbiIsInNlc3Npb25Ub2tlbiIsInEiLCJQYXJzZSIsIlF1ZXJ5IiwiZXF1YWxUbyIsImZpcnN0IiwidXNlTWFzdGVyS2V5IiwidGhlbiIsInNlc3Npb24iLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiU2Vzc2lvblRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJtYXhTaXplIiwiY2FjaGUiLCJMUlUiLCJtYXgiLCJtYXhBZ2UiLCJnZXRVc2VySWQiLCJ1c2VySWQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwicmVzb2x2ZSIsInVzZXIiLCJpZCIsInNldCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxTQUFTQSxtQkFBVCxDQUE2QkMsWUFBN0IsRUFBMEM7QUFDeEMsTUFBSUMsSUFBSSxJQUFJQyxlQUFNQyxLQUFWLENBQWdCLFVBQWhCLENBQVI7QUFDQUYsSUFBRUcsT0FBRixDQUFVLGNBQVYsRUFBMEJKLFlBQTFCO0FBQ0EsU0FBT0MsRUFBRUksS0FBRixDQUFRLEVBQUNDLGNBQWEsSUFBZCxFQUFSLEVBQTZCQyxJQUE3QixDQUFrQyxVQUFTQyxPQUFULEVBQWlCO0FBQ3hELFFBQUcsQ0FBQ0EsT0FBSixFQUFZO0FBQ1YsYUFBT0MsUUFBUUMsTUFBUixDQUFlLG9DQUFmLENBQVA7QUFDRDtBQUNELFdBQU9GLFFBQVFHLEdBQVIsQ0FBWSxNQUFaLENBQVA7QUFDRCxHQUxNLENBQVA7QUFNRDs7QUFFRCxNQUFNQyxpQkFBTixDQUF3Qjs7QUFHdEJDLGNBQVlDLFVBQWtCLEtBQUssRUFBTCxHQUFVLEVBQVYsR0FBZSxFQUFmLEdBQW9CLElBQWxELEVBQXdEQyxVQUFrQixLQUExRSxFQUFpRjtBQUMvRSxTQUFLQyxLQUFMLEdBQWEsSUFBSUMsa0JBQUosQ0FBUTtBQUNuQkMsV0FBS0gsT0FEYztBQUVuQkksY0FBUUw7QUFGVyxLQUFSLENBQWI7QUFJRDs7QUFFRE0sWUFBVXBCLFlBQVYsRUFBcUM7QUFDbkMsUUFBSSxDQUFDQSxZQUFMLEVBQW1CO0FBQ2pCLGFBQU9TLFFBQVFDLE1BQVIsQ0FBZSxvQkFBZixDQUFQO0FBQ0Q7QUFDRCxVQUFNVyxTQUFTLEtBQUtMLEtBQUwsQ0FBV0wsR0FBWCxDQUFlWCxZQUFmLENBQWY7QUFDQSxRQUFJcUIsTUFBSixFQUFZO0FBQ1ZDLHVCQUFPQyxPQUFQLENBQWUsK0NBQWYsRUFBZ0VGLE1BQWhFLEVBQXdFckIsWUFBeEU7QUFDQSxhQUFPUyxRQUFRZSxPQUFSLENBQWdCSCxNQUFoQixDQUFQO0FBQ0Q7QUFDRCxXQUFPdEIsb0JBQW9CQyxZQUFwQixFQUFrQ08sSUFBbEMsQ0FBd0NrQixJQUFELElBQVU7QUFDdERILHVCQUFPQyxPQUFQLENBQWUsK0NBQWYsRUFBZ0VFLEtBQUtDLEVBQXJFLEVBQXlFMUIsWUFBekU7QUFDQSxZQUFNcUIsU0FBU0ksS0FBS0MsRUFBcEI7QUFDQSxXQUFLVixLQUFMLENBQVdXLEdBQVgsQ0FBZTNCLFlBQWYsRUFBNkJxQixNQUE3QjtBQUNBLGFBQU9aLFFBQVFlLE9BQVIsQ0FBZ0JILE1BQWhCLENBQVA7QUFDRCxLQUxNLEVBS0hPLEtBQUQsSUFBVztBQUNaTix1QkFBT00sS0FBUCxDQUFhLG9EQUFiLEVBQW1FNUIsWUFBbkUsRUFBaUY0QixLQUFqRjtBQUNBLGFBQU9uQixRQUFRQyxNQUFSLENBQWVrQixLQUFmLENBQVA7QUFDRCxLQVJNLENBQVA7QUFTRDtBQTVCcUI7O1FBZ0N0QmhCLGlCLEdBQUFBLGlCIiwiZmlsZSI6IlNlc3Npb25Ub2tlbkNhY2hlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5mdW5jdGlvbiB1c2VyRm9yU2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbil7XG4gIHZhciBxID0gbmV3IFBhcnNlLlF1ZXJ5KFwiX1Nlc3Npb25cIik7XG4gIHEuZXF1YWxUbyhcInNlc3Npb25Ub2tlblwiLCBzZXNzaW9uVG9rZW4pO1xuICByZXR1cm4gcS5maXJzdCh7dXNlTWFzdGVyS2V5OnRydWV9KS50aGVuKGZ1bmN0aW9uKHNlc3Npb24pe1xuICAgIGlmKCFzZXNzaW9uKXtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIk5vIHNlc3Npb24gZm91bmQgZm9yIHNlc3Npb24gdG9rZW5cIik7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uLmdldChcInVzZXJcIik7XG4gIH0pO1xufVxuXG5jbGFzcyBTZXNzaW9uVG9rZW5DYWNoZSB7XG4gIGNhY2hlOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IodGltZW91dDogbnVtYmVyID0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLCBtYXhTaXplOiBudW1iZXIgPSAxMDAwMCkge1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgTFJVKHtcbiAgICAgIG1heDogbWF4U2l6ZSxcbiAgICAgIG1heEFnZTogdGltZW91dFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0VXNlcklkKHNlc3Npb25Ub2tlbjogc3RyaW5nKTogYW55IHtcbiAgICBpZiAoIXNlc3Npb25Ub2tlbikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdFbXB0eSBzZXNzaW9uVG9rZW4nKTtcbiAgICB9XG4gICAgY29uc3QgdXNlcklkID0gdGhpcy5jYWNoZS5nZXQoc2Vzc2lvblRva2VuKTtcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICBsb2dnZXIudmVyYm9zZSgnRmV0Y2ggdXNlcklkICVzIG9mIHNlc3Npb25Ub2tlbiAlcyBmcm9tIENhY2hlJywgdXNlcklkLCBzZXNzaW9uVG9rZW4pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1c2VySWQpO1xuICAgIH1cbiAgICByZXR1cm4gdXNlckZvclNlc3Npb25Ub2tlbihzZXNzaW9uVG9rZW4pLnRoZW4oKHVzZXIpID0+IHtcbiAgICAgIGxvZ2dlci52ZXJib3NlKCdGZXRjaCB1c2VySWQgJXMgb2Ygc2Vzc2lvblRva2VuICVzIGZyb20gUGFyc2UnLCB1c2VyLmlkLCBzZXNzaW9uVG9rZW4pO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIHRoaXMuY2FjaGUuc2V0KHNlc3Npb25Ub2tlbiwgdXNlcklkKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXNlcklkKTtcbiAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcignQ2FuIG5vdCBmZXRjaCB1c2VySWQgZm9yIHNlc3Npb25Ub2tlbiAlaiwgZXJyb3IgJWonLCBzZXNzaW9uVG9rZW4sIGVycm9yKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgU2Vzc2lvblRva2VuQ2FjaGVcbn1cbiJdfQ==