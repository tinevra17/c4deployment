'use strict';

const crypto = require('crypto');
const httpsRequest = require('./httpsRequest');
const Parse = require('parse/node').Parse;

const graphRequest = path => {
  return httpsRequest.get(`https://graph.accountkit.com/v1.1/${path}`);
};

function getRequestPath(authData, options) {
  const access_token = authData.access_token,
        appSecret = options && options.appSecret;
  if (appSecret) {
    const appsecret_proof = crypto.createHmac("sha256", appSecret).update(access_token).digest('hex');
    return `me?access_token=${access_token}&appsecret_proof=${appsecret_proof}`;
  }
  return `me?access_token=${access_token}`;
}

function validateAppId(appIds, authData, options) {
  if (!appIds.length) {
    return Promise.reject(new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is not configured.'));
  }
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.application && appIds.indexOf(data.application.id) != -1) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is invalid for this user.');
  });
}

function validateAuthData(authData, options) {
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.error) {
      throw data.error;
    }
    if (data && data.id == authData.id) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook Account Kit auth is invalid for this user.');
  });
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2ZhY2Vib29rYWNjb3VudGtpdC5qcyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiaHR0cHNSZXF1ZXN0IiwiUGFyc2UiLCJncmFwaFJlcXVlc3QiLCJwYXRoIiwiZ2V0IiwiZ2V0UmVxdWVzdFBhdGgiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJhY2Nlc3NfdG9rZW4iLCJhcHBTZWNyZXQiLCJhcHBzZWNyZXRfcHJvb2YiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwidmFsaWRhdGVBcHBJZCIsImFwcElkcyIsImxlbmd0aCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJ0aGVuIiwiZGF0YSIsImFwcGxpY2F0aW9uIiwiaW5kZXhPZiIsImlkIiwidmFsaWRhdGVBdXRoRGF0YSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxTQUFTQyxRQUFRLFFBQVIsQ0FBZjtBQUNBLE1BQU1DLGVBQWVELFFBQVEsZ0JBQVIsQ0FBckI7QUFDQSxNQUFNRSxRQUFTRixRQUFRLFlBQVIsRUFBc0JFLEtBQXJDOztBQUVBLE1BQU1DLGVBQWdCQyxJQUFELElBQVU7QUFDN0IsU0FBT0gsYUFBYUksR0FBYixDQUFrQixxQ0FBb0NELElBQUssRUFBM0QsQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBU0UsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLE9BQWxDLEVBQTJDO0FBQ3pDLFFBQU1DLGVBQWVGLFNBQVNFLFlBQTlCO0FBQUEsUUFBNENDLFlBQVlGLFdBQVdBLFFBQVFFLFNBQTNFO0FBQ0EsTUFBSUEsU0FBSixFQUFlO0FBQ2IsVUFBTUMsa0JBQWtCWixPQUFPYSxVQUFQLENBQWtCLFFBQWxCLEVBQTRCRixTQUE1QixFQUF1Q0csTUFBdkMsQ0FBOENKLFlBQTlDLEVBQTRESyxNQUE1RCxDQUFtRSxLQUFuRSxDQUF4QjtBQUNBLFdBQVEsbUJBQWtCTCxZQUFhLG9CQUFtQkUsZUFBZ0IsRUFBMUU7QUFDRDtBQUNELFNBQVEsbUJBQWtCRixZQUFhLEVBQXZDO0FBQ0Q7O0FBRUQsU0FBU00sYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JULFFBQS9CLEVBQXlDQyxPQUF6QyxFQUFrRDtBQUNoRCxNQUFJLENBQUNRLE9BQU9DLE1BQVosRUFBb0I7QUFDbEIsV0FBT0MsUUFBUUMsTUFBUixDQUNMLElBQUlqQixNQUFNa0IsS0FBVixDQUNFbEIsTUFBTWtCLEtBQU4sQ0FBWUMsZ0JBRGQsRUFFRSxvREFGRixDQURLLENBQVA7QUFLRDtBQUNELFNBQU9sQixhQUFhRyxlQUFlQyxRQUFmLEVBQXlCQyxPQUF6QixDQUFiLEVBQ0pjLElBREksQ0FDQ0MsUUFBUTtBQUNaLFFBQUlBLFFBQVFBLEtBQUtDLFdBQWIsSUFBNEJSLE9BQU9TLE9BQVAsQ0FBZUYsS0FBS0MsV0FBTCxDQUFpQkUsRUFBaEMsS0FBdUMsQ0FBQyxDQUF4RSxFQUEyRTtBQUN6RTtBQUNEO0FBQ0QsVUFBTSxJQUFJeEIsTUFBTWtCLEtBQVYsQ0FDSmxCLE1BQU1rQixLQUFOLENBQVlDLGdCQURSLEVBRUosMkRBRkksQ0FBTjtBQUdELEdBUkksQ0FBUDtBQVNEOztBQUVELFNBQVNNLGdCQUFULENBQTBCcEIsUUFBMUIsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDLFNBQU9MLGFBQWFHLGVBQWVDLFFBQWYsRUFBeUJDLE9BQXpCLENBQWIsRUFDSmMsSUFESSxDQUNDQyxRQUFRO0FBQ1osUUFBSUEsUUFBUUEsS0FBS0ssS0FBakIsRUFBd0I7QUFDdEIsWUFBTUwsS0FBS0ssS0FBWDtBQUNEO0FBQ0QsUUFBSUwsUUFBUUEsS0FBS0csRUFBTCxJQUFXbkIsU0FBU21CLEVBQWhDLEVBQW9DO0FBQ2xDO0FBQ0Q7QUFDRCxVQUFNLElBQUl4QixNQUFNa0IsS0FBVixDQUNKbEIsTUFBTWtCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSixxREFGSSxDQUFOO0FBR0QsR0FYSSxDQUFQO0FBWUQ7O0FBRURRLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmYsZUFEZTtBQUVmWTtBQUZlLENBQWpCIiwiZmlsZSI6ImZhY2Vib29rYWNjb3VudGtpdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcbmNvbnN0IFBhcnNlICA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKS5QYXJzZTtcblxuY29uc3QgZ3JhcGhSZXF1ZXN0ID0gKHBhdGgpID0+IHtcbiAgcmV0dXJuIGh0dHBzUmVxdWVzdC5nZXQoYGh0dHBzOi8vZ3JhcGguYWNjb3VudGtpdC5jb20vdjEuMS8ke3BhdGh9YCk7XG59O1xuXG5mdW5jdGlvbiBnZXRSZXF1ZXN0UGF0aChhdXRoRGF0YSwgb3B0aW9ucykge1xuICBjb25zdCBhY2Nlc3NfdG9rZW4gPSBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4sIGFwcFNlY3JldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5hcHBTZWNyZXQ7XG4gIGlmIChhcHBTZWNyZXQpIHtcbiAgICBjb25zdCBhcHBzZWNyZXRfcHJvb2YgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcHBTZWNyZXQpLnVwZGF0ZShhY2Nlc3NfdG9rZW4pLmRpZ2VzdCgnaGV4Jyk7XG4gICAgcmV0dXJuIGBtZT9hY2Nlc3NfdG9rZW49JHthY2Nlc3NfdG9rZW59JmFwcHNlY3JldF9wcm9vZj0ke2FwcHNlY3JldF9wcm9vZn1gXG4gIH1cbiAgcmV0dXJuIGBtZT9hY2Nlc3NfdG9rZW49JHthY2Nlc3NfdG9rZW59YDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZChhcHBJZHMsIGF1dGhEYXRhLCBvcHRpb25zKSB7XG4gIGlmICghYXBwSWRzLmxlbmd0aCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICAgJ0ZhY2Vib29rIGFwcCBpZCBmb3IgQWNjb3VudCBLaXQgaXMgbm90IGNvbmZpZ3VyZWQuJylcbiAgICApXG4gIH1cbiAgcmV0dXJuIGdyYXBoUmVxdWVzdChnZXRSZXF1ZXN0UGF0aChhdXRoRGF0YSwgb3B0aW9ucykpXG4gICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmFwcGxpY2F0aW9uICYmIGFwcElkcy5pbmRleE9mKGRhdGEuYXBwbGljYXRpb24uaWQpICE9IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICAgJ0ZhY2Vib29rIGFwcCBpZCBmb3IgQWNjb3VudCBLaXQgaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLicpO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXV0aERhdGEoYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdyYXBoUmVxdWVzdChnZXRSZXF1ZXN0UGF0aChhdXRoRGF0YSwgb3B0aW9ucykpXG4gICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmVycm9yKSB7XG4gICAgICAgIHRocm93IGRhdGEuZXJyb3I7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmlkID09IGF1dGhEYXRhLmlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICAgJ0ZhY2Vib29rIEFjY291bnQgS2l0IGF1dGggaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLicpO1xuICAgIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhXG59O1xuIl19