'use strict';

// Helper functions for accessing the google API.
var Parse = require('parse/node').Parse;
const httpsRequest = require('./httpsRequest');

function validateIdToken(id, token) {
  return googleRequest("tokeninfo?id_token=" + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
}

function validateAuthToken(id, token) {
  return googleRequest("tokeninfo?access_token=" + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
}

// Returns a promise that fulfills if this user id is valid.
function validateAuthData(authData) {
  if (authData.id_token) {
    return validateIdToken(authData.id, authData.id_token);
  } else {
    return validateAuthToken(authData.id, authData.access_token).then(() => {
      // Validation with auth token worked
      return;
    }, () => {
      // Try with the id_token param
      return validateIdToken(authData.id, authData.access_token);
    });
  }
}

// Returns a promise that fulfills if this app id is valid.
function validateAppId() {
  return Promise.resolve();
}

// A promisey wrapper for api requests
function googleRequest(path) {
  return httpsRequest.request("https://www.googleapis.com/oauth2/v3/" + path);
}

module.exports = {
  validateAppId: validateAppId,
  validateAuthData: validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2dvb2dsZS5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUlkVG9rZW4iLCJpZCIsInRva2VuIiwiZ29vZ2xlUmVxdWVzdCIsInRoZW4iLCJyZXNwb25zZSIsInN1YiIsInVzZXJfaWQiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJ2YWxpZGF0ZUF1dGhUb2tlbiIsInZhbGlkYXRlQXV0aERhdGEiLCJhdXRoRGF0YSIsImlkX3Rva2VuIiwiYWNjZXNzX3Rva2VuIiwidmFsaWRhdGVBcHBJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicGF0aCIsInJlcXVlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLEVBQXNCRCxLQUFsQztBQUNBLE1BQU1FLGVBQWVELFFBQVEsZ0JBQVIsQ0FBckI7O0FBRUEsU0FBU0UsZUFBVCxDQUF5QkMsRUFBekIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2xDLFNBQU9DLGNBQWMsd0JBQXdCRCxLQUF0QyxFQUNKRSxJQURJLENBQ0VDLFFBQUQsSUFBYztBQUNsQixRQUFJQSxhQUFhQSxTQUFTQyxHQUFULElBQWdCTCxFQUFoQixJQUFzQkksU0FBU0UsT0FBVCxJQUFvQk4sRUFBdkQsQ0FBSixFQUFnRTtBQUM5RDtBQUNEO0FBQ0QsVUFBTSxJQUFJSixNQUFNVyxLQUFWLENBQ0pYLE1BQU1XLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSix1Q0FGSSxDQUFOO0FBR0QsR0FSSSxDQUFQO0FBU0Q7O0FBRUQsU0FBU0MsaUJBQVQsQ0FBMkJULEVBQTNCLEVBQStCQyxLQUEvQixFQUFzQztBQUNwQyxTQUFPQyxjQUFjLDRCQUE0QkQsS0FBMUMsRUFDSkUsSUFESSxDQUNFQyxRQUFELElBQWM7QUFDbEIsUUFBSUEsYUFBY0EsU0FBU0MsR0FBVCxJQUFnQkwsRUFBaEIsSUFBc0JJLFNBQVNFLE9BQVQsSUFBb0JOLEVBQXhELENBQUosRUFBaUU7QUFDL0Q7QUFDRDtBQUNELFVBQU0sSUFBSUosTUFBTVcsS0FBVixDQUNKWCxNQUFNVyxLQUFOLENBQVlDLGdCQURSLEVBRUosdUNBRkksQ0FBTjtBQUdELEdBUkksQ0FBUDtBQVNEOztBQUVEO0FBQ0EsU0FBU0UsZ0JBQVQsQ0FBMEJDLFFBQTFCLEVBQW9DO0FBQ2xDLE1BQUlBLFNBQVNDLFFBQWIsRUFBdUI7QUFDckIsV0FBT2IsZ0JBQWdCWSxTQUFTWCxFQUF6QixFQUE2QlcsU0FBU0MsUUFBdEMsQ0FBUDtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9ILGtCQUFrQkUsU0FBU1gsRUFBM0IsRUFBK0JXLFNBQVNFLFlBQXhDLEVBQXNEVixJQUF0RCxDQUEyRCxNQUFNO0FBQ3RFO0FBQ0E7QUFDRCxLQUhNLEVBR0osTUFBTTtBQUNQO0FBQ0EsYUFBT0osZ0JBQWdCWSxTQUFTWCxFQUF6QixFQUE2QlcsU0FBU0UsWUFBdEMsQ0FBUDtBQUNELEtBTk0sQ0FBUDtBQU9EO0FBQ0Y7O0FBRUQ7QUFDQSxTQUFTQyxhQUFULEdBQXlCO0FBQ3ZCLFNBQU9DLFFBQVFDLE9BQVIsRUFBUDtBQUNEOztBQUVEO0FBQ0EsU0FBU2QsYUFBVCxDQUF1QmUsSUFBdkIsRUFBNkI7QUFDM0IsU0FBT25CLGFBQWFvQixPQUFiLENBQXFCLDBDQUEwQ0QsSUFBL0QsQ0FBUDtBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZOLGlCQUFlQSxhQURBO0FBRWZKLG9CQUFrQkE7QUFGSCxDQUFqQiIsImZpbGUiOiJnb29nbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIGdvb2dsZSBBUEkuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUlkVG9rZW4oaWQsIHRva2VuKSB7XG4gIHJldHVybiBnb29nbGVSZXF1ZXN0KFwidG9rZW5pbmZvP2lkX3Rva2VuPVwiICsgdG9rZW4pXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UgJiYgKHJlc3BvbnNlLnN1YiA9PSBpZCB8fCByZXNwb25zZS51c2VyX2lkID09IGlkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAgICdHb29nbGUgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXV0aFRva2VuKGlkLCB0b2tlbikge1xuICByZXR1cm4gZ29vZ2xlUmVxdWVzdChcInRva2VuaW5mbz9hY2Nlc3NfdG9rZW49XCIgKyB0b2tlbilcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZSAmJiAgKHJlc3BvbnNlLnN1YiA9PSBpZCB8fCByZXNwb25zZS51c2VyX2lkID09IGlkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAgICdHb29nbGUgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gICAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSkge1xuICBpZiAoYXV0aERhdGEuaWRfdG9rZW4pIHtcbiAgICByZXR1cm4gdmFsaWRhdGVJZFRva2VuKGF1dGhEYXRhLmlkLCBhdXRoRGF0YS5pZF90b2tlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlQXV0aFRva2VuKGF1dGhEYXRhLmlkLCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gVmFsaWRhdGlvbiB3aXRoIGF1dGggdG9rZW4gd29ya2VkXG4gICAgICByZXR1cm47XG4gICAgfSwgKCkgPT4ge1xuICAgICAgLy8gVHJ5IHdpdGggdGhlIGlkX3Rva2VuIHBhcmFtXG4gICAgICByZXR1cm4gdmFsaWRhdGVJZFRva2VuKGF1dGhEYXRhLmlkLCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiBnb29nbGVSZXF1ZXN0KHBhdGgpIHtcbiAgcmV0dXJuIGh0dHBzUmVxdWVzdC5yZXF1ZXN0KFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL1wiICsgcGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhXG59O1xuIl19