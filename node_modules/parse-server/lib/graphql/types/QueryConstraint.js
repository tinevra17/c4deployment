'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryConstraint = undefined;

var _graphql = require('graphql');

const supportedOperators = ['$eq', '$ne', '$in', '$nin', '$exists', '$select', '$dontSelect'];

const QueryConstraint = exports.QueryConstraint = new _graphql.GraphQLScalarType({
  name: 'QueryConstraint',
  description: `Generic Query Constraint
  Supported constraints:
  
  Equal To:
  - key: "value"
  - key: {$eq: "value"}
  
  Not Equal To
  - key: {$ne: "value"}
  
  Contained in:
  - key: {$in: ["value1", "value2"]}
  Not Contained in:
  - key: {$nin: ["value1", "value2"]}
  
  Exists: 
  - key: {$exists: true}
  
  This matches a value for a key in the result of a different query
  - key: {$select: {"query": {"className":"Team","where":{"winPct":{"$gt":0.5}}},"key":"city"}}}

  Requires that a keyâ€™s value not match a value for a key in the result of a different query
  - key: {$dontSelect: {"query": {"className":"Team","where":{"winPct":{"$gt":0.5}}},"key":"city"}}}
  `,
  serialize: () => {
    throw "StringQuery serialize not implemented";
  },
  parseValue: () => {
    throw "StringQuery parseValue not implemented";
  },
  parseLiteral: ast => {
    if (ast.kind == _graphql.Kind.OBJECT) {
      const fields = ast.fields;
      return fields.reduce((memo, field) => {
        const operator = field.name.value;
        if (supportedOperators.indexOf('$' + operator) > -1) {
          const value = field.value.value;
          memo['$' + operator] = value;
        }
        return memo;
      }, {});
    } else if (ast.kind == _graphql.Kind.STRING) {
      return ast.value;
    } else {
      throw 'Invalid literal for StringQuery';
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL1F1ZXJ5Q29uc3RyYWludC5qcyJdLCJuYW1lcyI6WyJzdXBwb3J0ZWRPcGVyYXRvcnMiLCJRdWVyeUNvbnN0cmFpbnQiLCJHcmFwaFFMU2NhbGFyVHlwZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInNlcmlhbGl6ZSIsInBhcnNlVmFsdWUiLCJwYXJzZUxpdGVyYWwiLCJhc3QiLCJraW5kIiwiS2luZCIsIk9CSkVDVCIsImZpZWxkcyIsInJlZHVjZSIsIm1lbW8iLCJmaWVsZCIsIm9wZXJhdG9yIiwidmFsdWUiLCJpbmRleE9mIiwiU1RSSU5HIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBS0EsTUFBTUEscUJBQXFCLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLEVBQXNCLE1BQXRCLEVBQThCLFNBQTlCLEVBQXlDLFNBQXpDLEVBQW9ELGFBQXBELENBQTNCOztBQUVPLE1BQU1DLDRDQUFrQixJQUFJQywwQkFBSixDQUFzQjtBQUNuREMsUUFBTSxpQkFENkM7QUFFbkRDLGVBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBRnFDO0FBMEJuREMsYUFBVyxNQUFNO0FBQ2YsVUFBTSx1Q0FBTjtBQUNELEdBNUJrRDtBQTZCbkRDLGNBQVksTUFBTTtBQUNoQixVQUFNLHdDQUFOO0FBQ0QsR0EvQmtEO0FBZ0NuREMsZ0JBQWVDLEdBQUQsSUFBUztBQUNyQixRQUFJQSxJQUFJQyxJQUFKLElBQVlDLGNBQUtDLE1BQXJCLEVBQTZCO0FBQzNCLFlBQU1DLFNBQVNKLElBQUlJLE1BQW5CO0FBQ0EsYUFBT0EsT0FBT0MsTUFBUCxDQUFjLENBQUNDLElBQUQsRUFBT0MsS0FBUCxLQUFpQjtBQUNwQyxjQUFNQyxXQUFXRCxNQUFNWixJQUFOLENBQVdjLEtBQTVCO0FBQ0EsWUFBSWpCLG1CQUFtQmtCLE9BQW5CLENBQTJCLE1BQU1GLFFBQWpDLElBQTZDLENBQUMsQ0FBbEQsRUFBcUQ7QUFDbkQsZ0JBQU1DLFFBQVFGLE1BQU1FLEtBQU4sQ0FBWUEsS0FBMUI7QUFDQUgsZUFBSyxNQUFNRSxRQUFYLElBQXVCQyxLQUF2QjtBQUNEO0FBQ0QsZUFBT0gsSUFBUDtBQUNELE9BUE0sRUFPSixFQVBJLENBQVA7QUFRRCxLQVZELE1BVU8sSUFBSU4sSUFBSUMsSUFBSixJQUFZQyxjQUFLUyxNQUFyQixFQUE2QjtBQUNsQyxhQUFPWCxJQUFJUyxLQUFYO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsWUFBTSxpQ0FBTjtBQUNEO0FBQ0Y7QUFoRGtELENBQXRCLENBQXhCIiwiZmlsZSI6IlF1ZXJ5Q29uc3RyYWludC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBLaW5kXG59IGZyb20gJ2dyYXBocWwnXG5cbmNvbnN0IHN1cHBvcnRlZE9wZXJhdG9ycyA9IFsnJGVxJywgJyRuZScsICckaW4nLCAnJG5pbicsICckZXhpc3RzJywgJyRzZWxlY3QnLCAnJGRvbnRTZWxlY3QnXVxuXG5leHBvcnQgY29uc3QgUXVlcnlDb25zdHJhaW50ID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ1F1ZXJ5Q29uc3RyYWludCcsXG4gIGRlc2NyaXB0aW9uOiBgR2VuZXJpYyBRdWVyeSBDb25zdHJhaW50XG4gIFN1cHBvcnRlZCBjb25zdHJhaW50czpcbiAgXG4gIEVxdWFsIFRvOlxuICAtIGtleTogXCJ2YWx1ZVwiXG4gIC0ga2V5OiB7JGVxOiBcInZhbHVlXCJ9XG4gIFxuICBOb3QgRXF1YWwgVG9cbiAgLSBrZXk6IHskbmU6IFwidmFsdWVcIn1cbiAgXG4gIENvbnRhaW5lZCBpbjpcbiAgLSBrZXk6IHskaW46IFtcInZhbHVlMVwiLCBcInZhbHVlMlwiXX1cbiAgTm90IENvbnRhaW5lZCBpbjpcbiAgLSBrZXk6IHskbmluOiBbXCJ2YWx1ZTFcIiwgXCJ2YWx1ZTJcIl19XG4gIFxuICBFeGlzdHM6IFxuICAtIGtleTogeyRleGlzdHM6IHRydWV9XG4gIFxuICBUaGlzIG1hdGNoZXMgYSB2YWx1ZSBmb3IgYSBrZXkgaW4gdGhlIHJlc3VsdCBvZiBhIGRpZmZlcmVudCBxdWVyeVxuICAtIGtleTogeyRzZWxlY3Q6IHtcInF1ZXJ5XCI6IHtcImNsYXNzTmFtZVwiOlwiVGVhbVwiLFwid2hlcmVcIjp7XCJ3aW5QY3RcIjp7XCIkZ3RcIjowLjV9fX0sXCJrZXlcIjpcImNpdHlcIn19fVxuXG4gIFJlcXVpcmVzIHRoYXQgYSBrZXnigJlzIHZhbHVlIG5vdCBtYXRjaCBhIHZhbHVlIGZvciBhIGtleSBpbiB0aGUgcmVzdWx0IG9mIGEgZGlmZmVyZW50IHF1ZXJ5XG4gIC0ga2V5OiB7JGRvbnRTZWxlY3Q6IHtcInF1ZXJ5XCI6IHtcImNsYXNzTmFtZVwiOlwiVGVhbVwiLFwid2hlcmVcIjp7XCJ3aW5QY3RcIjp7XCIkZ3RcIjowLjV9fX0sXCJrZXlcIjpcImNpdHlcIn19fVxuICBgLFxuICBzZXJpYWxpemU6ICgpID0+IHtcbiAgICB0aHJvdyBcIlN0cmluZ1F1ZXJ5IHNlcmlhbGl6ZSBub3QgaW1wbGVtZW50ZWRcIlxuICB9LFxuICBwYXJzZVZhbHVlOiAoKSA9PiB7XG4gICAgdGhyb3cgXCJTdHJpbmdRdWVyeSBwYXJzZVZhbHVlIG5vdCBpbXBsZW1lbnRlZFwiXG4gIH0sXG4gIHBhcnNlTGl0ZXJhbDogKGFzdCkgPT4ge1xuICAgIGlmIChhc3Qua2luZCA9PSBLaW5kLk9CSkVDVCkge1xuICAgICAgY29uc3QgZmllbGRzID0gYXN0LmZpZWxkcztcbiAgICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChtZW1vLCBmaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBvcGVyYXRvciA9IGZpZWxkLm5hbWUudmFsdWU7XG4gICAgICAgIGlmIChzdXBwb3J0ZWRPcGVyYXRvcnMuaW5kZXhPZignJCcgKyBvcGVyYXRvcikgPiAtMSkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZmllbGQudmFsdWUudmFsdWU7XG4gICAgICAgICAgbWVtb1snJCcgKyBvcGVyYXRvcl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICB9IGVsc2UgaWYgKGFzdC5raW5kID09IEtpbmQuU1RSSU5HKSB7XG4gICAgICByZXR1cm4gYXN0LnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnSW52YWxpZCBsaXRlcmFsIGZvciBTdHJpbmdRdWVyeSc7XG4gICAgfVxuICB9XG59KTtcbiJdfQ==