'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLJSONObject = exports.GraphQLPointer = exports.GraphQLDate = exports.GraphQLFile = exports.GraphQLGeoPointInput = exports.GraphQLGeoPoint = exports.GraphQLACLInput = exports.GraphQLACL = undefined;
exports.type = type;
exports.inputType = inputType;
exports.queryType = queryType;

var _graphql = require('graphql');

var _ACL = require('./ACL');

var _GeoPoint = require('./GeoPoint');

var _File = require('./File');

var _Date = require('./Date');

var _Pointer = require('./Pointer');

var _JSONObject = require('./JSONObject');

var _StringQuery = require('./StringQuery');

var _NumberQuery = require('./NumberQuery');

var _NumberInput = require('./NumberInput');

exports.GraphQLACL = _ACL.GraphQLACL;
exports.GraphQLACLInput = _ACL.GraphQLACLInput;
exports.GraphQLGeoPoint = _GeoPoint.GraphQLGeoPoint;
exports.GraphQLGeoPointInput = _GeoPoint.GraphQLGeoPointInput;
exports.GraphQLFile = _File.GraphQLFile;
exports.GraphQLDate = _Date.GraphQLDate;
exports.GraphQLPointer = _Pointer.GraphQLPointer;
exports.GraphQLJSONObject = _JSONObject.GraphQLJSONObject;
function type(fieldName, field) {
  if (fieldName === 'objectId') {
    return new _graphql.GraphQLNonNull(_graphql.GraphQLID);
  }
  const type = field.type;
  if (type == 'String') {
    return _graphql.GraphQLString;
  }if (type == 'Number') {
    return _graphql.GraphQLFloat;
  }if (type == 'Boolean') {
    return _graphql.GraphQLBoolean;
  }if (type == 'GeoPoint') {
    return _GeoPoint.GraphQLGeoPoint;
  }if (type == 'File') {
    return _File.GraphQLFile;
  } else if (type == 'ACL') {
    return _ACL.GraphQLACL;
  } else if (type == 'Date') {
    return _Date.GraphQLDate;
  } else if (type == 'Pointer') {
    return _Pointer.GraphQLPointer;
  }
}

function inputType(fieldName, field) {
  if (fieldName === 'objectId') {
    return new _graphql.GraphQLNonNull(_graphql.GraphQLID);
  }
  const type = field.type;
  if (type == 'String') {
    return _graphql.GraphQLString;
  }if (type == 'Number') {
    return _NumberInput.NumberInput;
  }if (type == 'Boolean') {
    return _graphql.GraphQLBoolean;
  }if (type == 'GeoPoint') {
    return _GeoPoint.GraphQLGeoPointInput;
  }if (type == 'File') {
    return _File.GraphQLFile;
  } else if (type == 'ACL') {
    return _ACL.GraphQLACLInput;
  } else if (type == 'Date') {
    return _Date.GraphQLDate;
  } else if (type == 'Pointer') {
    return _Pointer.GraphQLPointerInput;
  }
}

function queryType(fieldName, field) {
  if (fieldName === 'objectId') {
    return new _graphql.GraphQLNonNull(_graphql.GraphQLID);
  }
  const type = field.type;
  if (type == 'String') {
    return _StringQuery.StringQuery;
  }if (type == 'Number') {
    return _NumberQuery.NumberQuery;
  }if (type == 'Boolean') {
    return _graphql.GraphQLBoolean;
  }if (type == 'GeoPoint') {
    return _GeoPoint.GraphQLGeoPointInput;
  }if (type == 'File') {
    return _File.GraphQLFile;
  } else if (type == 'ACL') {
    // cannot query on ACL!
    return;
  } else if (type == 'Date') {
    return _Date.GraphQLDate;
  } else if (type == 'Pointer') {
    return _Pointer.GraphQLPointerInput;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbInR5cGUiLCJpbnB1dFR5cGUiLCJxdWVyeVR5cGUiLCJHcmFwaFFMQUNMIiwiR3JhcGhRTEFDTElucHV0IiwiR3JhcGhRTEdlb1BvaW50IiwiR3JhcGhRTEdlb1BvaW50SW5wdXQiLCJHcmFwaFFMRmlsZSIsIkdyYXBoUUxEYXRlIiwiR3JhcGhRTFBvaW50ZXIiLCJHcmFwaFFMSlNPTk9iamVjdCIsImZpZWxkTmFtZSIsImZpZWxkIiwiR3JhcGhRTE5vbk51bGwiLCJHcmFwaFFMSUQiLCJHcmFwaFFMU3RyaW5nIiwiR3JhcGhRTEZsb2F0IiwiR3JhcGhRTEJvb2xlYW4iLCJOdW1iZXJJbnB1dCIsIkdyYXBoUUxQb2ludGVySW5wdXQiLCJTdHJpbmdRdWVyeSIsIk51bWJlclF1ZXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7UUEwRGdCQSxJLEdBQUFBLEk7UUF3QkFDLFMsR0FBQUEsUztRQXdCQUMsUyxHQUFBQSxTOztBQTFHaEI7O0FBUUE7O0FBS0E7O0FBS0E7O0FBSUE7O0FBSUE7O0FBS0E7O0FBSUE7O0FBSUE7O0FBSUE7O1FBS0VDLFUsR0FBQUEsZTtRQUNBQyxlLEdBQUFBLG9CO1FBQ0FDLGUsR0FBQUEseUI7UUFDQUMsb0IsR0FBQUEsOEI7UUFDQUMsVyxHQUFBQSxpQjtRQUNBQyxXLEdBQUFBLGlCO1FBQ0FDLGMsR0FBQUEsdUI7UUFDQUMsaUIsR0FBQUEsNkI7QUFHSyxTQUFTVixJQUFULENBQWNXLFNBQWQsRUFBeUJDLEtBQXpCLEVBQWdDO0FBQ3JDLE1BQUlELGNBQWMsVUFBbEIsRUFBOEI7QUFDNUIsV0FBTyxJQUFJRSx1QkFBSixDQUFtQkMsa0JBQW5CLENBQVA7QUFDRDtBQUNELFFBQU1kLE9BQU9ZLE1BQU1aLElBQW5CO0FBQ0EsTUFBSUEsUUFBUSxRQUFaLEVBQXNCO0FBQ3BCLFdBQU9lLHNCQUFQO0FBQ0QsR0FBQyxJQUFJZixRQUFRLFFBQVosRUFBc0I7QUFDdEIsV0FBT2dCLHFCQUFQO0FBQ0QsR0FBQyxJQUFJaEIsUUFBUSxTQUFaLEVBQXVCO0FBQ3ZCLFdBQU9pQix1QkFBUDtBQUNELEdBQUMsSUFBSWpCLFFBQVEsVUFBWixFQUF3QjtBQUN4QixXQUFPSyx5QkFBUDtBQUNELEdBQUMsSUFBSUwsUUFBUSxNQUFaLEVBQW9CO0FBQ3BCLFdBQU9PLGlCQUFQO0FBQ0QsR0FGQyxNQUVLLElBQUlQLFFBQVEsS0FBWixFQUFtQjtBQUN4QixXQUFPRyxlQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlILFFBQVEsTUFBWixFQUFvQjtBQUN6QixXQUFPUSxpQkFBUDtBQUNELEdBRk0sTUFFQSxJQUFJUixRQUFRLFNBQVosRUFBdUI7QUFDNUIsV0FBT1MsdUJBQVA7QUFDRDtBQUNGOztBQUVNLFNBQVNSLFNBQVQsQ0FBbUJVLFNBQW5CLEVBQThCQyxLQUE5QixFQUFxQztBQUMxQyxNQUFJRCxjQUFjLFVBQWxCLEVBQThCO0FBQzVCLFdBQU8sSUFBSUUsdUJBQUosQ0FBbUJDLGtCQUFuQixDQUFQO0FBQ0Q7QUFDRCxRQUFNZCxPQUFPWSxNQUFNWixJQUFuQjtBQUNBLE1BQUlBLFFBQVEsUUFBWixFQUFzQjtBQUNwQixXQUFPZSxzQkFBUDtBQUNELEdBQUMsSUFBSWYsUUFBUSxRQUFaLEVBQXNCO0FBQ3RCLFdBQU9rQix3QkFBUDtBQUNELEdBQUMsSUFBSWxCLFFBQVEsU0FBWixFQUF1QjtBQUN2QixXQUFPaUIsdUJBQVA7QUFDRCxHQUFDLElBQUlqQixRQUFRLFVBQVosRUFBd0I7QUFDeEIsV0FBT00sOEJBQVA7QUFDRCxHQUFDLElBQUlOLFFBQVEsTUFBWixFQUFvQjtBQUNwQixXQUFPTyxpQkFBUDtBQUNELEdBRkMsTUFFSyxJQUFJUCxRQUFRLEtBQVosRUFBbUI7QUFDeEIsV0FBT0ksb0JBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSUosUUFBUSxNQUFaLEVBQW9CO0FBQ3pCLFdBQU9RLGlCQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlSLFFBQVEsU0FBWixFQUF1QjtBQUM1QixXQUFPbUIsNEJBQVA7QUFDRDtBQUNGOztBQUVNLFNBQVNqQixTQUFULENBQW1CUyxTQUFuQixFQUE4QkMsS0FBOUIsRUFBcUM7QUFDMUMsTUFBSUQsY0FBYyxVQUFsQixFQUE4QjtBQUM1QixXQUFPLElBQUlFLHVCQUFKLENBQW1CQyxrQkFBbkIsQ0FBUDtBQUNEO0FBQ0QsUUFBTWQsT0FBT1ksTUFBTVosSUFBbkI7QUFDQSxNQUFJQSxRQUFRLFFBQVosRUFBc0I7QUFDcEIsV0FBT29CLHdCQUFQO0FBQ0QsR0FBQyxJQUFJcEIsUUFBUSxRQUFaLEVBQXNCO0FBQ3RCLFdBQU9xQix3QkFBUDtBQUNELEdBQUMsSUFBSXJCLFFBQVEsU0FBWixFQUF1QjtBQUN2QixXQUFPaUIsdUJBQVA7QUFDRCxHQUFDLElBQUlqQixRQUFRLFVBQVosRUFBd0I7QUFDeEIsV0FBT00sOEJBQVA7QUFDRCxHQUFDLElBQUlOLFFBQVEsTUFBWixFQUFvQjtBQUNwQixXQUFPTyxpQkFBUDtBQUNELEdBRkMsTUFFSyxJQUFJUCxRQUFRLEtBQVosRUFBbUI7QUFDeEI7QUFDQTtBQUNELEdBSE0sTUFHQSxJQUFJQSxRQUFRLE1BQVosRUFBb0I7QUFDekIsV0FBT1EsaUJBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSVIsUUFBUSxTQUFaLEVBQXVCO0FBQzVCLFdBQU9tQiw0QkFBUDtBQUNEO0FBQ0YiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBHcmFwaFFMQm9vbGVhbixcbiAgR3JhcGhRTElELFxufSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQge1xuICBHcmFwaFFMQUNMLFxuICBHcmFwaFFMQUNMSW5wdXRcbn0gZnJvbSAnLi9BQ0wnO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMR2VvUG9pbnQsXG4gIEdyYXBoUUxHZW9Qb2ludElucHV0XG59IGZyb20gJy4vR2VvUG9pbnQnO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMRmlsZVxufSBmcm9tICcuL0ZpbGUnO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMRGF0ZVxufSBmcm9tICcuL0RhdGUnO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMUG9pbnRlcixcbiAgR3JhcGhRTFBvaW50ZXJJbnB1dCxcbn0gZnJvbSAnLi9Qb2ludGVyJztcblxuaW1wb3J0IHtcbiAgR3JhcGhRTEpTT05PYmplY3QsXG59IGZyb20gJy4vSlNPTk9iamVjdCc7XG5cbmltcG9ydCB7XG4gIFN0cmluZ1F1ZXJ5LFxufSBmcm9tICcuL1N0cmluZ1F1ZXJ5JztcblxuaW1wb3J0IHtcbiAgTnVtYmVyUXVlcnksXG59IGZyb20gJy4vTnVtYmVyUXVlcnknO1xuXG5pbXBvcnQge1xuICBOdW1iZXJJbnB1dCxcbn0gZnJvbSAnLi9OdW1iZXJJbnB1dCc7XG5cbmV4cG9ydCB7XG4gIEdyYXBoUUxBQ0wsXG4gIEdyYXBoUUxBQ0xJbnB1dCxcbiAgR3JhcGhRTEdlb1BvaW50LFxuICBHcmFwaFFMR2VvUG9pbnRJbnB1dCxcbiAgR3JhcGhRTEZpbGUsXG4gIEdyYXBoUUxEYXRlLFxuICBHcmFwaFFMUG9pbnRlcixcbiAgR3JhcGhRTEpTT05PYmplY3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGUoZmllbGROYW1lLCBmaWVsZCkge1xuICBpZiAoZmllbGROYW1lID09PSAnb2JqZWN0SWQnKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMSUQpO1xuICB9XG4gIGNvbnN0IHR5cGUgPSBmaWVsZC50eXBlO1xuICBpZiAodHlwZSA9PSAnU3RyaW5nJykge1xuICAgIHJldHVybiBHcmFwaFFMU3RyaW5nO1xuICB9IGlmICh0eXBlID09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIEdyYXBoUUxGbG9hdDtcbiAgfSBpZiAodHlwZSA9PSAnQm9vbGVhbicpIHtcbiAgICByZXR1cm4gR3JhcGhRTEJvb2xlYW47XG4gIH0gaWYgKHR5cGUgPT0gJ0dlb1BvaW50Jykge1xuICAgIHJldHVybiBHcmFwaFFMR2VvUG9pbnQ7XG4gIH0gaWYgKHR5cGUgPT0gJ0ZpbGUnKSB7XG4gICAgcmV0dXJuIEdyYXBoUUxGaWxlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ0FDTCcpIHtcbiAgICByZXR1cm4gR3JhcGhRTEFDTDtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdEYXRlJykge1xuICAgIHJldHVybiBHcmFwaFFMRGF0ZTtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdQb2ludGVyJykge1xuICAgIHJldHVybiBHcmFwaFFMUG9pbnRlcjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5wdXRUeXBlKGZpZWxkTmFtZSwgZmllbGQpIHtcbiAgaWYgKGZpZWxkTmFtZSA9PT0gJ29iamVjdElkJykge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTElEKTtcbiAgfVxuICBjb25zdCB0eXBlID0gZmllbGQudHlwZTtcbiAgaWYgKHR5cGUgPT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gR3JhcGhRTFN0cmluZztcbiAgfSBpZiAodHlwZSA9PSAnTnVtYmVyJykge1xuICAgIHJldHVybiBOdW1iZXJJbnB1dDtcbiAgfSBpZiAodHlwZSA9PSAnQm9vbGVhbicpIHtcbiAgICByZXR1cm4gR3JhcGhRTEJvb2xlYW47XG4gIH0gaWYgKHR5cGUgPT0gJ0dlb1BvaW50Jykge1xuICAgIHJldHVybiBHcmFwaFFMR2VvUG9pbnRJbnB1dDtcbiAgfSBpZiAodHlwZSA9PSAnRmlsZScpIHtcbiAgICByZXR1cm4gR3JhcGhRTEZpbGU7XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnQUNMJykge1xuICAgIHJldHVybiBHcmFwaFFMQUNMSW5wdXQ7XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnRGF0ZScpIHtcbiAgICByZXR1cm4gR3JhcGhRTERhdGU7XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnUG9pbnRlcicpIHtcbiAgICByZXR1cm4gR3JhcGhRTFBvaW50ZXJJbnB1dDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlUeXBlKGZpZWxkTmFtZSwgZmllbGQpIHtcbiAgaWYgKGZpZWxkTmFtZSA9PT0gJ29iamVjdElkJykge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTElEKTtcbiAgfVxuICBjb25zdCB0eXBlID0gZmllbGQudHlwZTtcbiAgaWYgKHR5cGUgPT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gU3RyaW5nUXVlcnk7XG4gIH0gaWYgKHR5cGUgPT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gTnVtYmVyUXVlcnk7XG4gIH0gaWYgKHR5cGUgPT0gJ0Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIEdyYXBoUUxCb29sZWFuO1xuICB9IGlmICh0eXBlID09ICdHZW9Qb2ludCcpIHtcbiAgICByZXR1cm4gR3JhcGhRTEdlb1BvaW50SW5wdXQ7XG4gIH0gaWYgKHR5cGUgPT0gJ0ZpbGUnKSB7XG4gICAgcmV0dXJuIEdyYXBoUUxGaWxlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ0FDTCcpIHtcbiAgICAvLyBjYW5ub3QgcXVlcnkgb24gQUNMIVxuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdEYXRlJykge1xuICAgIHJldHVybiBHcmFwaFFMRGF0ZTtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdQb2ludGVyJykge1xuICAgIHJldHVybiBHcmFwaFFMUG9pbnRlcklucHV0O1xuICB9XG59XG4iXX0=