'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberQuery = undefined;

var _graphql = require('graphql');

const NumberQuery = exports.NumberQuery = new _graphql.GraphQLScalarType({
  name: 'NumberQuery',
  description: `Queries for number values
  Supported constraints:

  - key: 1
  - key: {$lt: 1} # less than
  - key: {$gt: 1} # greater than
  - key: {$lte: 1} # less than or equal
  - key: {$gte: 1} # greater than or equal
  `,
  serialize: () => {
    throw "NumberQuery serialize not implemented";
  },
  parseValue: () => {
    throw "NumberQuery parseValue not implemented";
  },
  parseLiteral: ast => {
    if (ast.kind == _graphql.Kind.OBJECT) {
      const fields = ast.fields;
      return fields.reduce((memo, field) => {
        const operator = field.name.value;
        const value = field.value.value;
        memo['$' + operator] = parseFloat(value);
        return memo;
      }, {});
    } else if (ast.kind == _graphql.Kind.INT || ast.kind == _graphql.Kind.FLOAT) {
      return parseFloat(ast.value);
    } else {
      throw 'Invalid literal for NumberQuery';
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL051bWJlclF1ZXJ5LmpzIl0sIm5hbWVzIjpbIk51bWJlclF1ZXJ5IiwiR3JhcGhRTFNjYWxhclR5cGUiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJzZXJpYWxpemUiLCJwYXJzZVZhbHVlIiwicGFyc2VMaXRlcmFsIiwiYXN0Iiwia2luZCIsIktpbmQiLCJPQkpFQ1QiLCJmaWVsZHMiLCJyZWR1Y2UiLCJtZW1vIiwiZmllbGQiLCJvcGVyYXRvciIsInZhbHVlIiwicGFyc2VGbG9hdCIsIklOVCIsIkZMT0FUIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBS08sTUFBTUEsb0NBQWMsSUFBSUMsMEJBQUosQ0FBc0I7QUFDL0NDLFFBQU0sYUFEeUM7QUFFL0NDLGVBQWM7Ozs7Ozs7O0dBRmlDO0FBVy9DQyxhQUFXLE1BQU07QUFDZixVQUFNLHVDQUFOO0FBQ0QsR0FiOEM7QUFjL0NDLGNBQVksTUFBTTtBQUNoQixVQUFNLHdDQUFOO0FBQ0QsR0FoQjhDO0FBaUIvQ0MsZ0JBQWVDLEdBQUQsSUFBUztBQUNyQixRQUFJQSxJQUFJQyxJQUFKLElBQVlDLGNBQUtDLE1BQXJCLEVBQTZCO0FBQzNCLFlBQU1DLFNBQVNKLElBQUlJLE1BQW5CO0FBQ0EsYUFBT0EsT0FBT0MsTUFBUCxDQUFjLENBQUNDLElBQUQsRUFBT0MsS0FBUCxLQUFpQjtBQUNwQyxjQUFNQyxXQUFXRCxNQUFNWixJQUFOLENBQVdjLEtBQTVCO0FBQ0EsY0FBTUEsUUFBUUYsTUFBTUUsS0FBTixDQUFZQSxLQUExQjtBQUNBSCxhQUFLLE1BQU1FLFFBQVgsSUFBdUJFLFdBQVdELEtBQVgsQ0FBdkI7QUFDQSxlQUFPSCxJQUFQO0FBQ0QsT0FMTSxFQUtKLEVBTEksQ0FBUDtBQU1ELEtBUkQsTUFRTyxJQUFJTixJQUFJQyxJQUFKLElBQVlDLGNBQUtTLEdBQWpCLElBQXdCWCxJQUFJQyxJQUFKLElBQVlDLGNBQUtVLEtBQTdDLEVBQW9EO0FBQ3pELGFBQU9GLFdBQVdWLElBQUlTLEtBQWYsQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMLFlBQU0saUNBQU47QUFDRDtBQUNGO0FBL0I4QyxDQUF0QixDQUFwQiIsImZpbGUiOiJOdW1iZXJRdWVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBLaW5kXG59IGZyb20gJ2dyYXBocWwnXG5cbmV4cG9ydCBjb25zdCBOdW1iZXJRdWVyeSA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdOdW1iZXJRdWVyeScsXG4gIGRlc2NyaXB0aW9uOiBgUXVlcmllcyBmb3IgbnVtYmVyIHZhbHVlc1xuICBTdXBwb3J0ZWQgY29uc3RyYWludHM6XG5cbiAgLSBrZXk6IDFcbiAgLSBrZXk6IHskbHQ6IDF9ICMgbGVzcyB0aGFuXG4gIC0ga2V5OiB7JGd0OiAxfSAjIGdyZWF0ZXIgdGhhblxuICAtIGtleTogeyRsdGU6IDF9ICMgbGVzcyB0aGFuIG9yIGVxdWFsXG4gIC0ga2V5OiB7JGd0ZTogMX0gIyBncmVhdGVyIHRoYW4gb3IgZXF1YWxcbiAgYCxcbiAgc2VyaWFsaXplOiAoKSA9PiB7XG4gICAgdGhyb3cgXCJOdW1iZXJRdWVyeSBzZXJpYWxpemUgbm90IGltcGxlbWVudGVkXCJcbiAgfSxcbiAgcGFyc2VWYWx1ZTogKCkgPT4ge1xuICAgIHRocm93IFwiTnVtYmVyUXVlcnkgcGFyc2VWYWx1ZSBub3QgaW1wbGVtZW50ZWRcIlxuICB9LFxuICBwYXJzZUxpdGVyYWw6IChhc3QpID0+IHtcbiAgICBpZiAoYXN0LmtpbmQgPT0gS2luZC5PQkpFQ1QpIHtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IGFzdC5maWVsZHM7XG4gICAgICByZXR1cm4gZmllbGRzLnJlZHVjZSgobWVtbywgZmllbGQpID0+IHtcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBmaWVsZC5uYW1lLnZhbHVlO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLnZhbHVlLnZhbHVlO1xuICAgICAgICBtZW1vWyckJyArIG9wZXJhdG9yXSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICB9IGVsc2UgaWYgKGFzdC5raW5kID09IEtpbmQuSU5UIHx8IGFzdC5raW5kID09IEtpbmQuRkxPQVQpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGFzdC52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdJbnZhbGlkIGxpdGVyYWwgZm9yIE51bWJlclF1ZXJ5JztcbiAgICB9XG4gIH1cbn0pO1xuIl19