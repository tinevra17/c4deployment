'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberInput = undefined;

var _graphql = require('graphql');

const NumberInput = exports.NumberInput = new _graphql.GraphQLScalarType({
  name: 'NumberInput',
  description: `Input for number
  Supported schemas:

  - key: 1
  - key: {increment: 1}
  `,
  serialize: () => {
    throw "NumberInput serialize not implemented";
  },
  parseValue: () => {
    throw "NumberInput parseValue not implemented";
  },
  parseLiteral: ast => {
    if (ast.kind == _graphql.Kind.OBJECT) {
      const fields = ast.fields;
      if (fields.length != 1) {
        throw 'Invalid NUmberInput';
      }
      const field = fields[0];
      const operator = field.name.value;
      if (operator != "increment") {
        throw `the ${operator} operator is not supported`;
      }
      const value = field.value.value;
      return { "__op": "Increment", "amount": parseFloat(value) };
    } else if (ast.kind == _graphql.Kind.INT || ast.kind == _graphql.Kind.FLOAT) {
      return parseFloat(ast.value);
    } else {
      throw 'Invalid literal for NumberInput';
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL051bWJlcklucHV0LmpzIl0sIm5hbWVzIjpbIk51bWJlcklucHV0IiwiR3JhcGhRTFNjYWxhclR5cGUiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJzZXJpYWxpemUiLCJwYXJzZVZhbHVlIiwicGFyc2VMaXRlcmFsIiwiYXN0Iiwia2luZCIsIktpbmQiLCJPQkpFQ1QiLCJmaWVsZHMiLCJsZW5ndGgiLCJmaWVsZCIsIm9wZXJhdG9yIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwiSU5UIiwiRkxPQVQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFLTyxNQUFNQSxvQ0FBYyxJQUFJQywwQkFBSixDQUFzQjtBQUMvQ0MsUUFBTSxhQUR5QztBQUUvQ0MsZUFBYzs7Ozs7R0FGaUM7QUFRL0NDLGFBQVcsTUFBTTtBQUNmLFVBQU0sdUNBQU47QUFDRCxHQVY4QztBQVcvQ0MsY0FBWSxNQUFNO0FBQ2hCLFVBQU0sd0NBQU47QUFDRCxHQWI4QztBQWMvQ0MsZ0JBQWVDLEdBQUQsSUFBUztBQUNyQixRQUFJQSxJQUFJQyxJQUFKLElBQVlDLGNBQUtDLE1BQXJCLEVBQTZCO0FBQzNCLFlBQU1DLFNBQVNKLElBQUlJLE1BQW5CO0FBQ0EsVUFBSUEsT0FBT0MsTUFBUCxJQUFpQixDQUFyQixFQUF3QjtBQUN0QixjQUFNLHFCQUFOO0FBQ0Q7QUFDRCxZQUFNQyxRQUFRRixPQUFPLENBQVAsQ0FBZDtBQUNBLFlBQU1HLFdBQVdELE1BQU1YLElBQU4sQ0FBV2EsS0FBNUI7QUFDQSxVQUFJRCxZQUFZLFdBQWhCLEVBQTZCO0FBQzNCLGNBQU8sT0FBTUEsUUFBUyw0QkFBdEI7QUFDRDtBQUNELFlBQU1DLFFBQVFGLE1BQU1FLEtBQU4sQ0FBWUEsS0FBMUI7QUFDQSxhQUFPLEVBQUMsUUFBTyxXQUFSLEVBQW9CLFVBQVVDLFdBQVdELEtBQVgsQ0FBOUIsRUFBUDtBQUNELEtBWkQsTUFZTyxJQUFJUixJQUFJQyxJQUFKLElBQVlDLGNBQUtRLEdBQWpCLElBQXdCVixJQUFJQyxJQUFKLElBQVlDLGNBQUtTLEtBQTdDLEVBQW9EO0FBQ3pELGFBQU9GLFdBQVdULElBQUlRLEtBQWYsQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMLFlBQU0saUNBQU47QUFDRDtBQUNGO0FBaEM4QyxDQUF0QixDQUFwQiIsImZpbGUiOiJOdW1iZXJJbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBLaW5kXG59IGZyb20gJ2dyYXBocWwnXG5cbmV4cG9ydCBjb25zdCBOdW1iZXJJbnB1dCA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdOdW1iZXJJbnB1dCcsXG4gIGRlc2NyaXB0aW9uOiBgSW5wdXQgZm9yIG51bWJlclxuICBTdXBwb3J0ZWQgc2NoZW1hczpcblxuICAtIGtleTogMVxuICAtIGtleToge2luY3JlbWVudDogMX1cbiAgYCxcbiAgc2VyaWFsaXplOiAoKSA9PiB7XG4gICAgdGhyb3cgXCJOdW1iZXJJbnB1dCBzZXJpYWxpemUgbm90IGltcGxlbWVudGVkXCJcbiAgfSxcbiAgcGFyc2VWYWx1ZTogKCkgPT4ge1xuICAgIHRocm93IFwiTnVtYmVySW5wdXQgcGFyc2VWYWx1ZSBub3QgaW1wbGVtZW50ZWRcIlxuICB9LFxuICBwYXJzZUxpdGVyYWw6IChhc3QpID0+IHtcbiAgICBpZiAoYXN0LmtpbmQgPT0gS2luZC5PQkpFQ1QpIHtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IGFzdC5maWVsZHM7XG4gICAgICBpZiAoZmllbGRzLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgIHRocm93ICdJbnZhbGlkIE5VbWJlcklucHV0JztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpZWxkID0gZmllbGRzWzBdO1xuICAgICAgY29uc3Qgb3BlcmF0b3IgPSBmaWVsZC5uYW1lLnZhbHVlO1xuICAgICAgaWYgKG9wZXJhdG9yICE9IFwiaW5jcmVtZW50XCIpIHtcbiAgICAgICAgdGhyb3cgYHRoZSAke29wZXJhdG9yfSBvcGVyYXRvciBpcyBub3Qgc3VwcG9ydGVkYDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gZmllbGQudmFsdWUudmFsdWU7XG4gICAgICByZXR1cm4ge1wiX19vcFwiOlwiSW5jcmVtZW50XCIsXCJhbW91bnRcIjogcGFyc2VGbG9hdCh2YWx1ZSl9O1xuICAgIH0gZWxzZSBpZiAoYXN0LmtpbmQgPT0gS2luZC5JTlQgfHwgYXN0LmtpbmQgPT0gS2luZC5GTE9BVCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXN0LnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ0ludmFsaWQgbGl0ZXJhbCBmb3IgTnVtYmVySW5wdXQnO1xuICAgIH1cbiAgfVxufSk7XG4iXX0=